# FUN√á√ïES IMPORTADAS:
from operacoesbd import *
from time import sleep


# VARIAV√âIS DE MENSAGENS AUTOM√ÅTICAS:
loading = "‚Üª Carregando..."
acesso = "Acesso liberado! üêç"
redirect = "Iremos te redirecionar para o menu principal."
error = "‚ö†Ô∏é A op√ß√£o inserida √© inv√°lida! ‚ö†Ô∏é"


# 0 - CATEGORIAS (SOMENTE POR QUEST√ÉO DE ORGANIZA√á√ÉO)
def categoriasOcorrencias():
    print("\n" + "‚óÜ Categorias de Manifesta√ß√µes:" + "\n")
    print("[ 1 ] Reclama√ß√µes")
    print("[ 2 ] Sugest√µes")
    print("[ 3 ] Elogios" + "\n")


# 1 - LISTAR TUDO NA TABELA (MENU)
def listarOcorrencias(conexao):
    consultaOcorrencias = "select * from ocorrencias"
    ocorrencias = listarBancoDados(conexao, consultaOcorrencias)

    if len(ocorrencias) == 0:
        print("\n" + "‚óÜ Ainda n√£o existem manifesta√ß√µes a serem exibidas!")

    else:
        print("\n" + "‚óÜ Manifesta√ß√µes cadastradas at√© o momento:")
        for items in ocorrencias:
            sleep(2.5)
            print("\n" + "Protocolo:", items[0], "-", "Categoria:", items[1], "\n" + "‚û• T√≠tulo:", items[2],
                  "\n" + "‚û• Descri√ß√£o:", items[3], "\n" + "‚û• Autor:", items[4])


        print("\n" + "‚óÜ Fim da listagem.")

# 1.1 - LISTAR EM RESUMO
def listarResumido(conexao):
    consultaOcorrencias = "select protocolo, titulo, autor from ocorrencias"
    ocorrencias = listarBancoDados(conexao, consultaOcorrencias)

    if len(ocorrencias) == 0:
        print("\n" + "‚óÜ Ainda n√£o existem manifesta√ß√µes a serem exibidas!")

    else:
        print("\n" + "‚óÜ Manifesta√ß√µes cadastradas at√© o momento:")
        for items in ocorrencias:
            sleep(1.75)
            print("\n" + "Protocolo:", items[0], "\n" + "‚û• T√≠tulo:", items[1], "\n" + "‚û• Autor:", items[2])
            sleep(1.75)

        print("\n" + "‚óÜ Fim da listagem.")


# 2 - LISTAR POR CATEGORIA (MENU)
def listarPorCategoria(conexao):
    categoriasOcorrencias()
    categoria = int(input("‚ñ∂ Digite a categoria de manifesta√ß√£o que voc√™ deseja listar: "))

    if 0 < categoria < 4:
        ocorrenciasTipo = listarFromColumn(conexao, "tipo", str(categoria))

        if len(ocorrenciasTipo) == 0:
            print("\n" + "‚óÜ Ainda n√£o existem manifesta√ß√µes a serem exibidas nessa categoria!")

        else:
            print("\n" + "‚óÜ Manifesta√ß√µes cadastradas na categoria at√© o momento:")
            for items in ocorrenciasTipo:
                sleep(1.75)
                print("\n" + "Protocolo:", items[0], "\n" + "‚û• T√≠tulo:", items[2], "\n" + "‚û• Descri√ß√£o:",
                      items[3], "\n" +
                      "‚û• Autor:", items[4])
                sleep(1.75)

            print("\n" + "‚óÜ Fim da listagem.")

    else:
        print("\n" + error.center(55, " "))

# 2.1 - LISTAR UMA COLUNA ESPECIFICA DA TABELA:
def listarFromColumn(conexao, coluna, condicao):
    consultaQuantidade = "select * from ocorrencias where  " + coluna + " = " + condicao
    resultado = listarBancoDados(conexao,consultaQuantidade)
    return resultado


# 3 - CADASTRAR NA TABELA "OCORRENCIAS" (MENU)
def cadastrarOcorrencias(conexao, nome):
    categoriasOcorrencias()
    type = int(input("‚ñ∂ Digite pelo c√≥digo em qual categoria voc√™ deseja cadastrar sua manifesta√ß√£o: "))

    if 0 < type < 4:
        print("\n" + "‚óÜ Op√ß√µes de cadastro:" + "\n")
        print("[ 1 ] Sob seu nome")
        print("[ 2 ] Em Anonimato" + "\n")

        userCadastro = int(input("‚ñ∂ Digite pelo c√≥digo a forma na qual voc√™ deseja cadastrar sua manifesta√ß√£o: "))

        if userCadastro == 2:
            nome = "An√¥nimo"

        title = input("\n" + "‚ñ∂ Escreva um t√≠tulo que resuma sua manifesta√ß√£o: ")
        description = input("‚ñ∂ Por favor, descreva sua manifesta√ß√£o: ")

        sqlInsercao = 'insert into ocorrencias (tipo, titulo , descricao , autor) values (%s,%s,%s,%s)'
        valores = [str(type), title, description, nome]

        protocolo = insertNoBancoDados(conexao, sqlInsercao, valores)
        print("\n" + "‚úî  Sua manifesta√ß√£o foi cadastrada com sucesso! O n√∫mero do seu protocolo √©:",protocolo)

    else:
        print("\n" + error.center(55, " "))

# 3.1 - CADASTRAR NA TABELA DA CATEGORIA
def cadastrarOcorrenciasEmCategoria(conexao, categoria, id, title, description, name):

    if categoria == 1:

        tabela = "reclamacoes"

    elif categoria == 2:

        tabela = "sugestoes"

    else:
        tabela = "elogios"

    sqlInsercao = "insert into " + tabela + " (protocolo, titulo, descricao, autor) values (%s,%s,%s,%s)"
    valores = [id, title, description, name]

    insertNoBancoDados(conexao, sqlInsercao, valores)

# 3.2 - CADASTRAR NA TABELA DE USUARIOS
def cadastroUsuarios(conexao, setor):
    print("\n" + loading.center(55, " ") + "\n")
    sleep(2.5)

    if 0 < setor < 4:

        nome = input("‚ñ∂ Digite o seu nome completo: ")
        email = input("‚ñ∂ Nos informe seu e-mail institucional: ")
        nomeSplit = nome.split()

        if setor == 1:
            print("\n" + "‚óÜ Ol√°, " + nomeSplit[0] + "! Precisamos que compartilhe conosco algumas informa√ß√µes institucionais." + "\n")
            curso = input("‚ñ∂ Digite o curso voc√™ faz na universidade: ")
            matricula = input("‚ñ∂ Por fim, digite o seu n√∫mero de matr√≠cula: ")

            sqlInsertAssociados = "insert into estudantes (matricula,nome,curso,email_inst) values (%s,%s,%s,%s)"
            valores = [matricula, nome, curso, email]

            insertAssociadosNoBancoDados(conexao, sqlInsertAssociados, valores)

        elif setor == 2:
            print("\n" + "‚óÜ Ol√°, Prof. " + nomeSplit[1] + "! Precisamos que compartilhe conosco algumas informa√ß√µes institucionais." + "\n")

            curso = input("‚ñ∂ Digite para qual curso voc√™ leciona: ")
            disciplina = input("‚ñ∂ Digite quais disciplinas voc√™ leciona em " + curso + ": ")
            id = input("‚ñ∂ Por fim, digite seu n√∫mero de identifica√ß√£o: ")

            sqlInsertAssociados = "insert into docentes (id,nome,curso,disciplinas,email_inst) values (%s,%s,%s,%s,%s)"
            valores = [id, nome, curso, disciplina, email]

            insertAssociadosNoBancoDados(conexao, sqlInsertAssociados, valores)

        elif setor == 3:
            print("\n" + "‚óÜ Ol√°, " + nomeSplit[0] + "! Precisamos que compartilhe conosco algumas informa√ß√µes institucionais." + "\n")
            departamento = input("‚ñ∂ Digite o departamento da universidade no qual voc√™ trabalha: ")
            id = input("‚ñ∂ Por fim, digite o seu n√∫mero de identifica√ß√£o: ")

            sqlInsertAssociados = "insert into colaboradores (id,nome,depart,email_inst) values (%s,%s,%s,%s)"
            valores = [id, nome, departamento, email]

            insertAssociadosNoBancoDados(conexao, sqlInsertAssociados, valores)

    else:
        print(error + "\n" +
              "De antem√£o, deve ser alertado que essa Ouvidoria √© um sistema direcionado somente √† "
              "associados do centro universit√°rio." + "\n" + "Se esse n√£o for o seu caso, o acesso n√£o ser√° permitido.")

    return nome


# 4 - CONTAGEM DE OCORRENCIAS (MENU)
def contarOcorrencias(conexao):
    quantidadeTotal = selectCount(conexao)
    quantidadeRec = selectCountColumn(conexao, "tipo", "1")
    quantidadeSug = selectCountColumn(conexao, "tipo", "2")
    quantidadeElo = selectCountColumn(conexao, "tipo", "3")

    print("\n" + "‚óÜ No total, existem", quantidadeTotal, "manifesta√ß√µes cadastradas. Dentre essas:")
    print("‚û•", quantidadeRec, "s√£o reclama√ß√µes")
    print("‚û•", quantidadeSug, "s√£o sugest√µes")
    print("‚û•", quantidadeElo, "s√£o elogios")

# 4.1 - C√ìDIGO DA CONSULTA DE CONTAGEM
def selectCount(conexao):
    consultaQuantidade = "select count(*) from ocorrencias"
    resultado = listarBancoDados(conexao, consultaQuantidade)
    quantidade = resultado[0][0]
    return quantidade

# 4.2 - C√ìDIGO DA CONSULTA DE CONTAGEM DE UMA COLUNA ESPECIFICA
def selectCountColumn(conexao, coluna, condicao):
    consultaQuantidade = "select count(*) from ocorrencias where  " + coluna + " = " + condicao
    resultado = listarBancoDados(conexao,consultaQuantidade)
    quantidade = resultado[0][0]
    return quantidade


# 5 - PESQUISAR POR C√ìDIGO (MENU)
def consultarPorCodigo(conexao):
    listarResumido(conexao)
    codigo = int(input("\n" + "‚ñ∂ Digite o protocolo da manifesta√ß√£o que deseja encontrar: "))
    consultaOcorrrencia = selectCountColumn(conexao, "protocolo", str(codigo))

    if consultaOcorrrencia == 0:
        print("\n" + error.center(55, " "))

    else:
        pesquisarOcorrencia = listarFromColumn(conexao, "protocolo", str(codigo))
        print("\n" + "‚åï A manifesta√ß√£o pesquisada foi:")
        for items in pesquisarOcorrencia:
            print("\n" + "Categoria:", items[1], "\n" + "‚û• T√≠tulo:", items[2],
                  "\n" + "‚û• Descri√ß√£o:", items[3], "\n" + "‚û• Autor:", items[4])


# 6 - ALTERAR (MENU)
def alterarManifestacao(conexao):
    listarResumido(conexao)
    codigo = input("\n" + "‚ñ∂ Digite o protocolo da manifesta√ß√£o que deseja alterar: ")
    consultaOcorrencia = selectCountColumn(conexao, "protocolo", codigo)

    if consultaOcorrencia == 0:
        print("\n" + error.center(55, " "))

    else:
        pesquisarOcorrencia = listarFromColumn(conexao, "protocolo", codigo)
        print("\n" + "‚åï A manifesta√ß√£o selecionada foi:")

        for items in pesquisarOcorrencia:
            sleep(1.75)
            print("\n" + "Categoria:", items[1], "\n" + "‚û• T√≠tulo:", items[2],
                  "\n" + "‚û• Descri√ß√£o:", items[3], "\n" + "‚û• Autor:", items[4])
            sleep(1.75)

        print("\n" + "‚óÜ A seguir, voc√™ poder√° modifica-la ‚§µ")
        newTitle = input("\n" + "‚ñ∂ Reescreva o t√≠tulo da manifesta√ß√£o: ")
        newDescription = input("‚ñ∂ Adicione a nova descri√ß√£o dessa manifesta√ß√£o: ")

        sqlAtualizar = "update ocorrencias set titulo = %s, descricao = %s  where protocolo = " + codigo
        valores = [newTitle, newDescription]
        atualizarBancoDados(conexao, sqlAtualizar, valores)

        print("\n" + "‚úì  A manifesta√ß√£o foi atualizada com sucesso!")


# 7 - DELETAR (MENU)
def deletarManifestacoes(conexao):
    quantidade = selectCount(conexao)

    if quantidade == 0:
        print("\n" + "‚óÜ Ainda n√£o existem manifesta√ß√µes que possam ser deletadas!")

    else:
        print("\n" + "‚óÜ Op√ß√µes disponiveis:" + "\n")
        print("[ 1 ] Remover Todas as Manifesta√ß√µes")
        print("[ 2 ] Remover Todas as Manifesta√ß√µes de uma Categoria")
        print("[ 3 ] Remover Manifesta√ß√µes Espec√≠ficas")

        remove = int(input("\n" + "‚ñ∂ Digite a op√ß√£o que deseja realizar: "))

        if remove == 1:
            removerTodasManifestacoes(conexao)

        elif remove == 2:
            removerPorCategoria(conexao)

        elif remove == 3:
            removerPorProtocolo(conexao)

        else:
            print("\n"  + error.center(55, " "))

# 7.1 - [ 1 ] REMOVER TODAS AS MANIFESTA√á√ïES:
def removerTodasManifestacoes(conexao):
    print("\n" + "Essa a√ß√£o √© irreversivel! Tem certeza que deseja remover todas as manifesta√ß√µes da ouvidoria?")
    print("\n" + "[ 1 ] Sim" + "\n" + "[ 2 ] N√£o" + "\n")
    escolha = int(input("‚ñ∂ Digite o c√≥digo da sua escolha: "))

    if escolha == 1:
        sqlDelet = "delete from ocorrencias"
        delAllBancoDados(conexao, sqlDelet)
        print("\n" + "‚úî  Todas as manifesta√ß√µes foram removidas com sucesso!")

    elif escolha == 2:
        print("\n" + "‚óÜ O processo de remo√ß√£o foi cancelado.")

    else:
        print("\n" + error.center(55, " "))

# 7.2 - [ 2 ] REMOVER TODAS AS MANIFESTA√á√ïES DE UMA CATEGORIA ESPECIFICA:
def removerPorCategoria(conexao):
    categoriasOcorrencias()
    codigo = int(input("‚ñ∂ Digite o c√≥digo da categoria que voc√™ deseja realizar a remo√ß√£o: "))

    if 0 < codigo < 4:
        quantidadeCategoria = selectCountColumn(conexao, "tipo", str(codigo))

        if quantidadeCategoria == 0:
            print("\n" + "‚óÜ Nessa categoria, ainda n√£o existem manifesta√ß√µes que possam ser deletadas!")

        else:
            print("\n" + "Essa a√ß√£o √© irreversivel! Tem certeza que deseja remover todas as manifesta√ß√µes dessa categoria?")
            print("\n" + "[ 1 ] Sim" + "\n" + "[ 2 ] N√£o" + "\n")
            escolha = int(input("‚ñ∂ Digite o c√≥digo da sua escolha: "))

            if escolha == 1:
                deletFromColumn(conexao, "tipo", str(codigo))
                print("\n" + "‚úî  Todas as manifesta√ß√µes da categoria selecionada foram removidas com sucesso!")

            elif escolha == 2:
                print("\n" + "‚óÜ O processo de remo√ß√£o foi cancelado.")

            else:
                print("\n" + error.center(55, " "))

    else:
        print("\n" + error.center(55, " "))

# 7.3 - [ 3 ] REMOVER MANIFESTA√á√ÉO POR PROTOCOLO:
def removerPorProtocolo(conexao):
    listarResumido(conexao)
    codigo = input("\n" + "‚ñ∂ Digite o protocolo da manifesta√ß√£o que voc√™ deseja deletar: ")
    quantidadeCategoria = selectCountColumn(conexao, "protocolo", codigo)

    if quantidadeCategoria == 0:
        print("\n" + error.center(55, " "))
    else:
        print("\n" + "Essa a√ß√£o √© irreversivel! Tem certeza que deseja remover essa manifesta√ß√£o?")
        print("\n" + "[ 1 ] Sim" + "\n" + "[ 2 ] N√£o" + "\n")
        escolha = int(input("‚ñ∂ Digite o c√≥digo da sua escolha: "))

        if escolha == 1:
            deletFromColumn(conexao, "protocolo", codigo)
            print("\n" + "‚úî  A manifesta√ß√£o de protocolo", codigo, "foi removida com sucesso!")

        elif escolha == 2:
            print("\n" + "‚óÜ O processo de remo√ß√£o foi cancelado.")

        else:
            print("\n" + error.center(55, " "))

# 7.4 - DELETAR SOB A CONDI√á√ÉO DE UMA COLUNA ESPECIFICA
def deletFromColumn(conexao, coluna, condicao):
    sqlDelet = "delete from ocorrencias where %s = %s"
    dados = (coluna, condicao)
    excluirBancoDados(conexao, sqlDelet, dados)
